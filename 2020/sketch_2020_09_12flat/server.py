"""
sketch-2020-09-12flat by Alexandre B A Villares - https://abav.lugaralgum.com/sketch-a-day
The base for this "glitch" is a fork of (@aparrish) Allison Parrish's amazing example using Flat + Bezmerizing to draw SVG.
Lot's of help from Marco Macarena adding the HTML inputs!
"""

from flask import Flask, send_file, request
import random

from flat_processing import *

sf = 1
sf_value = 10
sf_min = 1
sf_max = 40
layers = 3
seed_value = 100
cah = '#000000'
cbh = '#C83200'

R = prandom

gliphs = (lambda x, y, s, r: rect(x + R(r), y - R(r), s + R(r), s - R(r)),
          lambda x, y, s, r: ellipse(x - R(r), y - R(r), s, s),
          lambda x, y, s, r: triangle(x - s - R(r), y , x - s, y + s, x, y + s),
          lambda x, y, s, r: triangle(x + s, y, x + s, y - s, x, y - s + R(r)),
         )

colors = [(0, 50, 150, 150), #003296
          (200, 50, 0, 150)  #C83200
         ]

def draw():
    size(1400 * sf, 700 * sf)
    background(235, 235, 220)
    
    print(f"seed: {seed_value}")
    random.seed(seed_value)  
    # grid(width / 2, height / 2, 1, 150 * sf, ensamble, 5)
    grid(width / 2, height / 2, (8, 4), 140 * sf, ensamble, layers)

    
def grid(x, y, order, spacing, function, *args):  
    if type(order) is tuple:
        cols, rows = order
    else:
        cols = rows = order
    xo, yo = (x - cols * spacing / 2 , y - rows * spacing / 2)
    for i in range(cols):
        gx = spacing / 2 + i * spacing 
        for j in range(rows):
            gy = spacing/2 + j * spacing 
            function(xo + gx , yo + gy , *args)


def ensamble(ex, ey, eo):
    noStroke()
    flip = random.randint(1,3)
    for i in range(eo):
        noFill()
        stroke(*colors[(i+flip) % len(colors)])
        order = (random.randint(8,24),
                 random.randint(4,16))
        spacing, side =  14, 7
        x = (1 + random.randint(-5, 4)) * side * sf
        y = (1 + random.randint(-5, 4)) * side * sf
        grid(ex+x,
             ey+y,
             order,
             spacing * sf,
             random.choice(gliphs),
             side * sf, i * 2 * sf)
    
app = Flask(__name__)
       
def hex_to_rgb(h, alpha=150):
    r, g, b = bytes.fromhex(h[1:])
    # h1, h2, h3 = h[1:3],  h[3:5],  h[5:7]
    # r, g , b = int(h1, 16), int(h2, 16), int(h3, 16)
    return r, g, b, alpha  
  
def try_int(i, default=1):
  try:
    return int(i)
  except:
    return default
  
def treat_request(request):
  global name, cah, cbh, license_svg
  global sf_value, sf
  global layers_value, layers
  global seed_value, seed_request  
  
  name = request.url.split('/')[2].split('.')[0]
  # print(request.args)  # debug
  license_svg = f"""{name} generated by Alexandre B A Villares \n licensed under CC-BY-SA 4.0"""
 
  layers_value = request.args.get('layers') or layers
  layers = try_int(layers_value)
  if layers > 12:
    layers = 12
    layers_value = 12
    
    
  sf_value = request.args.get('sf') or sf_value
  sf = int(sf_value) / 10
  
  seed_request = request.args.get('seed') or str(seed_value)
  seed_value = try_int(seed_request)
  
  if request.args.get('randomize'):
      seed_value = random.randint(1, 10e10)
  
  cah = request.args.get('ca') or cah
  colors[0] = hex_to_rgb(cah)
  cbh = request.args.get('cb') or cbh 
  colors[1] = hex_to_rgb(cbh)
  
@app.route('/sketch.svg', methods=['GET'])
def svg():
  treat_request(request)
  draw()
  svg = page.svg().decode("utf-8")
  return svg.replace("Untitled", license_svg) 

@app.route('/', methods=['GET'])
def index():
  treat_request(request)
  draw()
  svg_link = request.url.replace('.me/', '.me/sketch.svg')
  svg_link = svg_link.replace('randomize=randomize&', '')
  if seed_request:
      svg_link = svg_link.replace(seed_request, str(seed_value))

  license = f""" generated with <a rel="cc:attributionURL" property="dct:title"
href="https://glitch.com/~{name}">{name}</a> by <a rel="cc:attributionURL dct:creator" property="cc:attributionName" href="https://abav.lugaralgum.com">Alexandre B A Villares</a> licensed under <a rel="license" href="https://creativecommons.org/licenses/by-sa/4.0">CC BY-SA 4.0 <img style="height:12px!important;margin-left:3px;" src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1" /><img style="height:12px!important;margin-left:3px;" src="https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1" /><img style="height:12px!important;margin-left:3px;" src="https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1" /></a> (<a href="https://gumroad.com/villares">keep this online, donate</a>)</p> 
"""
  return f"""
  <html><head><title>{request.url.replace('https://','')} by Alexandre B A Villares</title></head>
  <body>
  <form action="" method="GET">
  <font face="Source Code Pro, monospace">
  <label for="seed">seed </label>
  <input id="seed" name="seed" value="{seed_value}" />
  <input type="submit" name="randomize" value="randomize">
  <label for="layers"> layers </label>
  <input id="layers" name="layers" value="{layers_value}" />
  <label for="sf"> scale ({sf_value}) </label>
  <input id="sf" type="range" name="sf" min="{sf_min}" max="{sf_max}" value="{sf_value}" />
  <input type="color" id="ca" name="ca" value="{cah}">
  <input type="color" id="cb" name="cb" value="{cbh}">
  <input type="submit" name="redraw" value="redraw"> 
  <br /><a href={svg_link}>sketch.svg</a> {license}
  </font>
  </form>
  <p style="font-family:Source Code Pro, monospace" xmlns:dct="http://purl.org/dc/terms/" xmlns:cc="http://creativecommons.org/ns#" class="license-text">
  {page.svg().decode("utf-8").replace("Untitled", license_svg)}
  </body></html>"""  


if __name__ == '__main__':
    app.run()